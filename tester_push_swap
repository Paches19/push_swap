#!/bin/bash

PATH_PUSH_SWAP="."
# cd $PATH_PUSH_SWAP (!!!!!!descomentar si se pone fuera de la raiz del programa)
make
# cd .. (!!!!!!descomentar si se pone fuera de la raiz del programa)

# Definir función para esperar la señal para continuar
wait_for_signal() {
    echo "Presione Enter para continuar..."
    trap 'echo ""; break' SIGINT
    read
    trap - SIGINT
}

echo -e "sin argumento\n"
ARG=""; $PATH_PUSH_SWAP/push_swap $ARG | $PATH_PUSH_SWAP/checker_Mac $ARG
ARG=""; $PATH_PUSH_SWAP/push_swap $ARG | wc -l
wait_for_signal

echo -e "error no digit\n"
ARG="0 2 a"; $PATH_PUSH_SWAP/push_swap $ARG | $PATH_PUSH_SWAP/checker_Mac $ARG
ARG="0 2 a"; $PATH_PUSH_SWAP/push_swap $ARG | wc -l
ARG="2 a"; $PATH_PUSH_SWAP/push_swap $ARG | $PATH_PUSH_SWAP/checker_Mac $ARG
ARG="2 a"; $PATH_PUSH_SWAP/push_swap $ARG | wc -l
ARG="a a a"; $PATH_PUSH_SWAP/push_swap $ARG | $PATH_PUSH_SWAP/checker_Mac $ARG
ARG="a a a"; $PATH_PUSH_SWAP/push_swap $ARG | wc -l
wait_for_signal

echo -e "MAX_INT MIN_INT\n"
ARG="0 2 2938819478917498"; $PATH_PUSH_SWAP/push_swap $ARG | $PATH_PUSH_SWAP/checker_Mac $ARG
ARG="0 2 2938819478917498"; $PATH_PUSH_SWAP/push_swap $ARG | wc -l
ARG="0 2 -2938819478917498"; $PATH_PUSH_SWAP/push_swap $ARG | $PATH_PUSH_SWAP/checker_Mac $ARG
ARG="0 2- 2938819478917498"; $PATH_PUSH_SWAP/push_swap $ARG | wc -l
wait_for_signal

echo -e "prueba error por duplicado:"
ARG="0 2 1 5 2"; $PATH_PUSH_SWAP/push_swap $ARG | $PATH_PUSH_SWAP/checker_Mac $ARG
ARG="0 2 1 5 2"; $PATH_PUSH_SWAP/push_swap $ARG | wc -l
wait_for_signal

echo -e "\nprueba identidad:"
for i in {1..10}
do
    # Genera un número aleatorio entre -1000 y 1000
    ARG=$(jot -r 1 -1000 1000)

    # Ejecuta los comandos con ARG
    $PATH_PUSH_SWAP/push_swap $ARG | $PATH_PUSH_SWAP/checker_Mac $ARG
    $PATH_PUSH_SWAP/push_swap $ARG | wc -l
done
wait_for_signal

echo -e "\nprueba 3 numeros aleatorios:"
ARG="0 2 1"; $PATH_PUSH_SWAP/push_swap $ARG | $PATH_PUSH_SWAP/checker_Mac $ARG
ARG="0 2 1"; $PATH_PUSH_SWAP/push_swap $ARG | wc -l
wait_for_signal

echo -e "\nprueba 5 numeros:"
ARG="0 2 1 5 23"; $PATH_PUSH_SWAP/push_swap $ARG | $PATH_PUSH_SWAP/checker_Mac $ARG
ARG="0 2 1 5 23"; $PATH_PUSH_SWAP/push_swap $ARG | wc -l
wait_for_signal

echo -e "\nprueba 100 numeros:"
ARG="2339 9010 -8146 9752 -3851 -9233 -9108 6657 6163 -2666 8971 -2499 2703 2668 1602 -1610 -4267 7636 -2180 2724 8159 -397 -1263 -2181 -521 -5637 7586 1392 3113 892 9192 -7071 -438 8555 -9149 -1506 -6205 -659 -3221 168 -1143 6221 4059 -2998 6092 -6477 -8683 8785 6518 3026 2153 -8508 8759 4612 3491 -117 -7567 7485 6270 -4137 -3412 -5016 -4194 -3084 6763 -4928 3299 619 1680 9451 8416 1031 -8166 -4930 -3645 613 -9390 -8537 -6240 6604 -9403 4756 4193 -1828 -9904 1449 -4317 -808 -1396 -6196 -5167 4617 1244 -467 -2161 -6335 -2741 -9260 8253 2472"; $PATH_PUSH_SWAP/push_swap $ARG | $PATH_PUSH_SWAP/checker_Mac $ARG
ARG="2339 9010 -8146 9752 -3851 -9233 -9108 6657 6163 -2666 8971 -2499 2703 2668 1602 -1610 -4267 7636 -2180 2724 8159 -397 -1263 -2181 -521 -5637 7586 1392 3113 892 9192 -7071 -438 8555 -9149 -1506 -6205 -659 -3221 168 -1143 6221 4059 -2998 6092 -6477 -8683 8785 6518 3026 2153 -8508 8759 4612 3491 -117 -7567 7485 6270 -4137 -3412 -5016 -4194 -3084 6763 -4928 3299 619 1680 9451 8416 1031 -8166 -4930 -3645 613 -9390 -8537 -6240 6604 -9403 4756 4193 -1828 -9904 1449 -4317 -808 -1396 -6196 -5167 4617 1244 -467 -2161 -6335 -2741 -9260 8253 2472"; $PATH_PUSH_SWAP/push_swap $ARG | wc -l
wait_for_signal

echo -e "\nprueba 500 numeros:"
ARG="-1376 -5316 -2758 -2326 -4826 2919 7559 -1188 5059 -7309 1240 -9527 4671 -9541 -2625 451 6274 1106 -2592 -988 -4964 261 4009 3567 4261 -9713 -8778 -6003 7353 -2214 -2514 -7600 6754 -4565 -5517 -3184 1159 -6688 -7801 -3018 -6887 -1097 3458 -4947 -9962 8500 -4406 2053 -9352 -6648 -6615 9150 -9900 288 -9739 9764 -8843 -9638 655 -8551 -2275 -597 -3045 5866 -4953 -2445 3882 8147 6846 6119 -7642 -7194 -9427 -2032 -8974 7170 6019 7904 -380 -2598 -6017 -4999 -8746 -48 8290 709 -5569 4529 1368 9126 1213 9376 4534 -5213 -5643 -49 -8089 3660 1538 -4006 2733 3829 -9217 -7445 -8315 4008 297 2905 5121 9253 -4702 1100 6652 3105 5909 220 6085 -5220 -3680 2390 -1096 -6028 -7026 6299 2516 -5622 -4994 -3271 -3638 5685 -2550 5126 6638 508 7592 -2346 3549 4076 -5119 -446 -1842 1577 8564 -8113 1302 -897 -748 3165 8473 -7637 5081 -3941 -8691 3210 8749 -7603 2992 205 -3347 -4967 -2293 -8802 1993 -4259 -8429 -471 -6731 2576 8687 3224 -5479 3415 -661 376 -673 458 6882 9490 -657 2701 -8366 -8382 5703 -9187 -7436 8306 -5153 1248 -9735 -2124 -347 793 214 5800 4340 -2360 9584 -1871 -7231 2682 -8716 6795 1129 2646 -6716 6695 7399 -4561 6214 -3803 5348 -2881 -7383 -7172 -2668 -3106 8022 4653 7829 -7181 -9482 5492 9782 2856 -2328 3252 -2383 2182 -9897 1919 7166 2870 9463 2220 4936 2886 5050 4908 -6860 -8918 -4956 -2046 -4349 -6576 9983 173 -8285 -3739 1200 -4244 3690 -5533 8385 9664 -1153 -807 478 -6548 -3813 4081 -5801 -8603 3720 4745 -3383 4119 -9082 -4151 -6034 1928 -396 1918 -6896 -426 1373 -4474 -6935 -5912 4480 2713 -1786 -4490 9095 7915 1020 -5131 4408 -9585 7462 -107 8745 -9188 -8065 -7299 -1114 -527 65 4114 7001 2494 7728 571 -3455 2369 -2479 -8510 -3554 -1847 -9866 6869 2230 -6541 -13 -7736 1958 -3443 9705 -5446 -3574 3096 2141 -9475 5270 -7242 -5092 4074 8715 -2679 -7008 3293 61 4719 1926 5683 -4435 -99 -8011 -8411 4417 4839 3788 -9393 9944 3234 -764 5028 -4205 -6409 6552 1235 -6975 1430 -8863 -4306 4669 5940 -8158 -620 -8822 -4659 -8232 -8367 -3704 9882 -4761 2775 341 751 -4743 -783 4837 9041 2655 -2677 -3682 -1313 4961 -7066 8489 -9825 3697 -1789 8719 -7888 7986 6384 -7909 -8662 -4024 2620 -5675 -2425 -9768 1139 -5570 -840 -1832 -5253 4003 1683 -5373 8722 -1799 2481 -7518 8063 2018 -8048 -1367 -6312 -2354 -9106 -8333 3506 -3984 -5196 -4729 2308 -5796 -7497 3235 9299 8430 -4195 -6775 -9090 3841 -5630 6398 6240 6637 5422 -7091 8870 -9648 7317 2430 8796 3352 -6518 5070 685 -2299 2128 8280 2872 -7531 7226 9214 3733 8484 7665 7127 -6046 -5652 -3686 -9453 -5727 7682 6428 723 -5444 3936 -3364 -1743 -9300 9023 -4882 4504 615 -7722 -5059 -4414 -9224 3232 8912 -6454 -2256 8577 -3238 -4088 -696 -4305 -6826 -2605 -6135 519 1468 -7646 -2135 4468 -216 7620 -8540 -6665 7845 1517 2555 -9490 2197"; $PATH_PUSH_SWAP/push_swap $ARG | $PATH_PUSH_SWAP/checker_Mac $ARG
ARG="-1376 -5316 -2758 -2326 -4826 2919 7559 -1188 5059 -7309 1240 -9527 4671 -9541 -2625 451 6274 1106 -2592 -988 -4964 261 4009 3567 4261 -9713 -8778 -6003 7353 -2214 -2514 -7600 6754 -4565 -5517 -3184 1159 -6688 -7801 -3018 -6887 -1097 3458 -4947 -9962 8500 -4406 2053 -9352 -6648 -6615 9150 -9900 288 -9739 9764 -8843 -9638 655 -8551 -2275 -597 -3045 5866 -4953 -2445 3882 8147 6846 6119 -7642 -7194 -9427 -2032 -8974 7170 6019 7904 -380 -2598 -6017 -4999 -8746 -48 8290 709 -5569 4529 1368 9126 1213 9376 4534 -5213 -5643 -49 -8089 3660 1538 -4006 2733 3829 -9217 -7445 -8315 4008 297 2905 5121 9253 -4702 1100 6652 3105 5909 220 6085 -5220 -3680 2390 -1096 -6028 -7026 6299 2516 -5622 -4994 -3271 -3638 5685 -2550 5126 6638 508 7592 -2346 3549 4076 -5119 -446 -1842 1577 8564 -8113 1302 -897 -748 3165 8473 -7637 5081 -3941 -8691 3210 8749 -7603 2992 205 -3347 -4967 -2293 -8802 1993 -4259 -8429 -471 -6731 2576 8687 3224 -5479 3415 -661 376 -673 458 6882 9490 -657 2701 -8366 -8382 5703 -9187 -7436 8306 -5153 1248 -9735 -2124 -347 793 214 5800 4340 -2360 9584 -1871 -7231 2682 -8716 6795 1129 2646 -6716 6695 7399 -4561 6214 -3803 5348 -2881 -7383 -7172 -2668 -3106 8022 4653 7829 -7181 -9482 5492 9782 2856 -2328 3252 -2383 2182 -9897 1919 7166 2870 9463 2220 4936 2886 5050 4908 -6860 -8918 -4956 -2046 -4349 -6576 9983 173 -8285 -3739 1200 -4244 3690 -5533 8385 9664 -1153 -807 478 -6548 -3813 4081 -5801 -8603 3720 4745 -3383 4119 -9082 -4151 -6034 1928 -396 1918 -6896 -426 1373 -4474 -6935 -5912 4480 2713 -1786 -4490 9095 7915 1020 -5131 4408 -9585 7462 -107 8745 -9188 -8065 -7299 -1114 -527 65 4114 7001 2494 7728 571 -3455 2369 -2479 -8510 -3554 -1847 -9866 6869 2230 -6541 -13 -7736 1958 -3443 9705 -5446 -3574 3096 2141 -9475 5270 -7242 -5092 4074 8715 -2679 -7008 3293 61 4719 1926 5683 -4435 -99 -8011 -8411 4417 4839 3788 -9393 9944 3234 -764 5028 -4205 -6409 6552 1235 -6975 1430 -8863 -4306 4669 5940 -8158 -620 -8822 -4659 -8232 -8367 -3704 9882 -4761 2775 341 751 -4743 -783 4837 9041 2655 -2677 -3682 -1313 4961 -7066 8489 -9825 3697 -1789 8719 -7888 7986 6384 -7909 -8662 -4024 2620 -5675 -2425 -9768 1139 -5570 -840 -1832 -5253 4003 1683 -5373 8722 -1799 2481 -7518 8063 2018 -8048 -1367 -6312 -2354 -9106 -8333 3506 -3984 -5196 -4729 2308 -5796 -7497 3235 9299 8430 -4195 -6775 -9090 3841 -5630 6398 6240 6637 5422 -7091 8870 -9648 7317 2430 8796 3352 -6518 5070 685 -2299 2128 8280 2872 -7531 7226 9214 3733 8484 7665 7127 -6046 -5652 -3686 -9453 -5727 7682 6428 723 -5444 3936 -3364 -1743 -9300 9023 -4882 4504 615 -7722 -5059 -4414 -9224 3232 8912 -6454 -2256 8577 -3238 -4088 -696 -4305 -6826 -2605 -6135 519 1468 -7646 -2135 4468 -216 7620 -8540 -6665 7845 1517 2555 -9490 2197"; $PATH_PUSH_SWAP/push_swap $ARG | wc -l
echo -e "\n"
wait_for_signal

echo -e "\nprueba 3 aleatorios:"
for i in {1..50}
do
    # Genera un número aleatorio para el tamaño del vector
    size=3
	echo -e "\nprueba $i:"
    # Genera un vector de tamaño "size" con números aleatorios no repetidos
    declare -a ARG=()
    while [[ ${#ARG[@]} -lt $size ]]
    do
        num=$(jot -r 1 -1000 1000)
        if [[ ! " ${ARG[@]} " =~ " ${num} " ]]; then
            ARG+=($num)
        fi
    done

    # Imprime el vector generado
    echo -e "Vector size $size random: [${ARG[@]}]\n"

    # Ejecuta tu código push_swap aquí con ARG como argumento
    $PATH_PUSH_SWAP/push_swap "${ARG[@]}" | $PATH_PUSH_SWAP/checker_Mac "${ARG[@]}"
    $PATH_PUSH_SWAP/push_swap "${ARG[@]}" | wc -l
done
wait_for_signal

echo -e "\nprueba 5 aleatorios:"
for i in {1..50}
do
    # Genera un número aleatorio para el tamaño del vector
    size=5
	echo -e "\nprueba $i:"
    # Genera un vector de tamaño "size" con números aleatorios no repetidos
    declare -a ARG=()
    while [[ ${#ARG[@]} -lt $size ]]
    do
        num=$(jot -r 1 -1000 1000)
        if [[ ! " ${ARG[@]} " =~ " ${num} " ]]; then
            ARG+=($num)
        fi
    done

    # Imprime el vector generado
    echo -e "Vector size $size random: [${ARG[@]}]\n"

    # Ejecuta tu código push_swap aquí con ARG como argumento
    $PATH_PUSH_SWAP/push_swap "${ARG[@]}" | $PATH_PUSH_SWAP/checker_Mac "${ARG[@]}"
    $PATH_PUSH_SWAP/push_swap "${ARG[@]}" | wc -l
done
wait_for_signal

echo -e "\nprueba 100 aleatorios:"
for i in {1..25}
do
    # Genera un número aleatorio para el tamaño del vector
    size=100
	echo -e "\nprueba $i:"
    # Genera un vector de tamaño "size" con números aleatorios no repetidos
    declare -a ARG=()
    while [[ ${#ARG[@]} -lt $size ]]
    do
        num=$(jot -r 1 -1000 1000)
        if [[ ! " ${ARG[@]} " =~ " ${num} " ]]; then
            ARG+=($num)
        fi
    done

    # Imprime el vector generado
    # echo -e "Vector size $size random: [${ARG[@]}]\n"

    # Ejecuta tu código push_swap aquí con ARG como argumento
    $PATH_PUSH_SWAP/push_swap "${ARG[@]}" | $PATH_PUSH_SWAP/checker_Mac "${ARG[@]}"
    $PATH_PUSH_SWAP/push_swap "${ARG[@]}" | wc -l
done
wait_for_signal

echo -e "\nprueba 500 aleatorios:"
for i in {1..25}
do
    # Genera un número aleatorio para el tamaño del vector
    size=500
	echo -e "\nprueba $i:"
    # Genera un vector de tamaño "size" con números aleatorios no repetidos
    declare -a ARG=()
    while [[ ${#ARG[@]} -lt $size ]]
    do
        num=$(jot -r 1 -10000 10000)
        if [[ ! " ${ARG[@]} " =~ " ${num} " ]]; then
            ARG+=($num)
        fi
    done

    # Imprime el vector generado
    # echo -e "Vector size $size random: [${ARG[@]}]\n"

    # Ejecuta tu código push_swap aquí con ARG como argumento
    $PATH_PUSH_SWAP/push_swap "${ARG[@]}" | $PATH_PUSH_SWAP/checker_Mac "${ARG[@]}"
    $PATH_PUSH_SWAP/push_swap "${ARG[@]}" | wc -l
done
# Eliminar programa y archivos de compilacion
make fclean